%{
    #include "parser.h"
%}

%token            VOID
%token            INT
%token            BYTE
%token            B
%token            BOOL
%left             OR
%left             AND
%right            NOT
%token            TRUE
%token            FALSE
%token            RETURN
%token            IF
%token            ELSE
%token            WHILE
%token            BREAK
%token            CONTINUE
%token            PRECOND
%token            SC
%token            COMMA
%token            LPAREN
%token            RPAREN
%token            LBRACE
%token            RBRACE
%right            ASSIGN
%left             RELOP
%left             BINOP
%token            ID
%token            NUM
%token            STRING

%%

Program	:	Funcs
        { verifyMainFunction(); }
        ;

Funcs	:	/*epsilon*/
		|	FuncDecl Funcs
	    ;

FuncDecl	:	RetType ID LPAREN {new_scope();} Formals RPAREN PreConditions LBRACE Statements RBRACE
            {
                tokens ret_type = static_cast<tokens>(static_cast<Type*>($1)->type);
                string id = static_cast<Id*>($2)->id;
                ParamsList* l = static_cast<ParamsList*>($5);
                add_func(l->params, ret_type, id);
                int pre_num = static_cast<Preconditions*>($7)->preconditions_num;
                printPreconditions(id, pre_num);
                exit_scope();
            }
	        ;

RetType	:	Type
            { $$ = new Type(static_cast<Type*>($1)->type); }

		|	VOID
		    { $$ = new Type(VOID); }
	    ;

Formals	:	/*epsilon*/
        { $$ = new ParamsList(); }

		|	FormalsList
		{
            $$ = new ParamsList();
            vector<int>& params = static_cast<ParamsList*>($$)->params;
            vector<int>& params_other = static_cast<ParamsList*>($1)->params;
            params = params_other;
		}
	    ;

FormalsList	:	FormalDecl
            {
                $$ = new ParamsList();
                Type* t = static_cast<Type*>($1);
                static_cast<ParamsList*>($$)->params.push_back(t->type);
            }
			|	FormalDecl COMMA FormalsList
			{
                $$ = new ParamsList();
                vector<int>& params = static_cast<ParamsList*>($$)->params;
                vector<int>& params_other = static_cast<ParamsList*>($3)->params;
                params.push_back(static_cast<Type*>($1)->type);
                params.insert(params.end(), params_other.begin(), params_other.end());
			}
			;

FormalDecl	:	Type ID
            {
                tryAddVariable($1, $2, true);
                $$ = new Type(static_cast<Type*>($1)->type);
                printID(static_cast<Id*>($2)->id, func_param_offset+1,
                        type_to_string[static_cast<Type*>($1)->type]);
	        }
            ;
PreConditions	:	/*epsilon*/ {$$ = new Preconditions(0);}
				|	PreConditions PreCondition
				{
				 int num = static_cast<Preconditions*>($1)->preconditions_num;
				 $$ = new Preconditions(num + 1);
				}
	            ;

PreCondition	:	PRECOND LPAREN Exp RPAREN
                    { verifyType($3, BOOL); }
	            ;

Statements	:	Statement
			|	Statements Statement
	        ;

Statement: Open_statement
         | Closed_statement
         ;

Open_statement: IF LPAREN Exp RPAREN Simple_statement
                { verifyType($3, BOOL); }

              | IF {new_scope();} LPAREN Exp RPAREN Open_statement
                { verifyType($3, BOOL); }

              | IF LPAREN Exp RPAREN Closed_statement ELSE Open_statement
                { verifyType($3, BOOL); }

              | WHILE {in_while = true;} LPAREN Exp RPAREN {in_while = false;} Open_statement
                { verifyType($3, BOOL); }
              ;

Closed_statement: Simple_statement
                | IF LPAREN Exp RPAREN Closed_statement ELSE Closed_statement
                  { verifyType($3, BOOL); }

                | WHILE LPAREN {in_while = true;} Exp RPAREN {in_while = false;} Closed_statement
                  { verifyType($3, BOOL); }
                ;

Simple_statement: LBRACE {new_scope();} Statements RBRACE {exit_scope();}

                | Type ID SC
                  {tryAddVariable($1, $2, false);
                   printID(static_cast<Id*>($2)->id, offsets_stack.top()-1,
                   type_to_string[static_cast<Type*>($1)->type]);}

                | Type ID ASSIGN Exp SC
                  {tryAddVariable($1, $2, false);
                   Type* t = static_cast<Type*>($1);
                   printID(static_cast<Id*>($2)->id, offsets_stack.top()-1,
                   type_to_string[static_cast<Type*>($1)->type]);}

                | ID ASSIGN Exp SC
                | Call SC
                | RETURN SC
                {

                }
                | RETURN Exp SC
                {

                }
                | BREAK SC
                {
                    if (!in_while) {
                        errorUnexpectedBreak(yylineno);
                    }
                }
                | CONTINUE SC
                {
                    if (!in_while) {
                        errorUnexpectedContinue(yylineno);
                    }
                }
                ;

Call	:	ID LPAREN ExpList RPAREN
            {
                verifyFunctionDefined($1);
                $$ = new Type(getFunctionReturnType($1));
            }

		|	ID LPAREN RPAREN
		    { verifyFunctionDefined($1); }
	    ;

ExpList	:	Exp
		|	Exp COMMA ExpList
	    ;

Type	:	INT
        { $$ = new Type(INT); }

		|	BYTE
		{ $$ = new Type(BYTE); }

		|	BOOL
		{ $$ = new Type(BOOL); }
	    ;

Exp	:	LPAREN Exp RPAREN
    { $$ = new Type(static_cast<Type*>($2)->type); }

	|	Exp BINOP Exp
	{
        int t1 = verifyTypes($1, 3, NUM, BYTE, INT);
        int t2 = verifyTypes($3, 3, NUM, BYTE, INT);

        // Try NUM precision first, retreat to byte if both are BYTE
        int preciseType = t1 == NUM ? NUM : (t2 == NUM ? NUM : BYTE);
        $$ = new Type(preciseType);
    }

	|	ID
    {
        verifyVariableDefined($1);
        $$ = new Type(getVariableType($1));
    }

	|	Call
	{ $$ = $1; }

	|	NUM
	{ $$ = new Type(NUM); }

	|	NUM B
	{
	    verifyByteSize($1);
	    $$ = new Type(BYTE);
	}

	|	STRING
	{ $$ = new Type(STRING); }

	|	TRUE
	{ $$ = new Type(BOOL); }

	|	FALSE
	{ $$ = new Type(BOOL); }

	|	NOT Exp
	{
    	verifyType($2, BOOL);
        $$ = new Type(BOOL);
    }
	|	Exp AND Exp
	{
	    verifyType($1, BOOL);
	    verifyType($3, BOOL);
        $$ = new Type(BOOL);
    }
	|	Exp OR Exp
	{
	    verifyType($1, BOOL);
     	verifyType($3, BOOL);
        $$ = new Type(BOOL);
    }
	|	Exp RELOP Exp
	{
	    verifyTypes($1, 3, NUM, BYTE, INT);
	    verifyTypes($3, 3, NUM, BYTE, INT);
	    $$ = new Type(BOOL);
	}
	;

%%
