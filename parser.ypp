%{
    #include <iostream>
    #include <stdlib.h>
    #include <stdio.h>
    #include "source.hpp"

    #define YYERROR_VERBOSE 1
    #define vector<ScopeTable> TablesStack
    #define unordered_map<string, symbol_data> ScopeTable

    using namespace std;

    TablesStack symbol_tables;
    stack<int> offsets_stack;
    int main();
    int yyerror(const char* message);
    void add_var(tokens type, string name);
    void add_func(vector<tokens> param_types, tokens ret_type, string name);
    bool contains_var(string name);
    void new_scope_table();

    extern int yylex();
%}

%token            VOID
%token            INT
%token            BYTE
%token            B
%token            BOOL
%left             OR
%left             AND
%right            NOT
%token            TRUE
%token            FALSE
%token            RETURN
%token            IF
%token            ELSE
%token            WHILE
%token            BREAK
%token            CONTINUE
%token            PRECOND
%token            SC
%token            COMMA
%token            LPAREN
%token            RPAREN
%token            LBRACE
%token            RBRACE
%right            ASSIGN
%left             RELOP
%left             BINOP
%token            ID
%token            NUM
%token            STRING

%%

Program	:	Funcs
        ;

Funcs	:	/*epsilon*/
		|	FuncDecl Funcs
	    ;

FuncDecl	:	RetType ID LPAREN Formals RPAREN PreConditions LBRACE Statements RBRACE
	        ;

RetType	:	Type
		|	VOID
	    ;

Formals	:	/*epsilon*/
		|	FormalsList
	    ;

FormalsList	:	FormalDecl
			|	FormalDecl COMMA FormalsList ;

FormalDecl	:	Type ID
	        ;

PreConditions	:	/*epsilon*/
				|	PreConditions PreCondition
	            ;

PreCondition	:	PRECOND LPAREN Exp RPAREN
	            ;

Statements	:	Statement
			|	Statements Statement
	        ;

Statement: Open_statement
         | Closed_statement
         ;

Open_statement: IF LPAREN Exp RPAREN Simple_statement
              | IF LPAREN Exp RPAREN Open_statement
              | IF LPAREN Exp RPAREN Closed_statement ELSE Open_statement
              | WHILE LPAREN Exp RPAREN Open_statement
              ;

Closed_statement: Simple_statement
                | IF LPAREN Exp RPAREN Closed_statement ELSE Closed_statement
                | WHILE LPAREN Exp RPAREN Closed_statement
                ;

Simple_statement: LBRACE Statements RBRACE
                | Type ID SC
                | Type ID ASSIGN Exp SC
                | ID ASSIGN Exp SC
                | Call SC
                | RETURN SC
                | RETURN Exp SC
                | BREAK SC
                | CONTINUE SC
                ;

Call	:	ID LPAREN ExpList RPAREN
		|	ID LPAREN RPAREN
	    ;

ExpList	:	Exp
		|	Exp COMMA ExpList
	    ;

Type	:	INT
		|	BYTE
		|	BOOL
	    ;

Exp	:	LPAREN Exp RPAREN
	|	Exp BINOP Exp
	|	ID
	|	Call
	|	NUM
	|	NUM B
	|	STRING
	|	TRUE
	|	FALSE
	|	NOT Exp
	|	Exp AND Exp
	|	Exp OR	Exp
	|	Exp RELOP Exp
	;

%%

void add_var(tokens type, string name){
    int offset = offsets_stack.top();
    symbol_data s(type, offset);
    ScopeTable& t = symbol_tables.top();
    t.
}


int yyerror(const char* message){
	cout << "Parse error: " << message << endl;
	exit(0);
}

int main(){
    #ifdef YYDEBUG
        yydebug = 1;
    #endif
    return yyparse();
}

