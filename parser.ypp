%{
    #include <iostream>
    #include <stdlib.h>

    using namespace std;

    int main();
    int yyerror(char* message);

    extern int yylex();
%}

%token            VOID
%token            INT
%token            BYTE
%token            B
%token            BOOL
%token            AND
%token            OR
%token            NOT
%token            TRUE
%token            FALSE
%token            RETURN
%token            IF
%token            ELSE
%token            WHILE
%token            BREAK
%token            CONTINUE
%token            PRECOND
%token            SC
%token            COMMA
%token            LPAREN
%token            RPAREN
%token            LBRACE
%token            RBRACE
%token            ASSIGN
%token            RELOP
%token            BINOP
%token            ID
%token            NUM
%token            STRING

%%

Program	:	Funcs
    ;

Funcs	:	/*epsilon*/
		|	FuncDecl Funcs
	;
FuncDecl	:	RetType ID LPAREN Formals RPAREN PreConditions LBRACE Statements RBRACE
	;
RetType	:	Type
		|	VOID
	;
Formals	:	/*epsilon*/
		|	FormalsList
	;
FormalsList	:	FormalDecl
			|	FormalDecl COMMA FormalsList ;

FormalDecl	:	Type ID
	;
PreConditions	:	/*epsilon*/
				|	PreConditions PreCondition
	;
PreCondition	:	PRECOND LPAREN Exp RPAREN
	;
Statements	:	Statement
			|	Statements Statement
	;
Statement	:	LBRACE Statements RBRACE
			|	Type ID SC
			|	Type ID ASSIGN Exp SC
			|	ID ASSIGN Exp SC
			|	Call SC
			|	RETURN SC
			|	RETURN Exp SC
			|	IF LPAREN Exp RPAREN Statement
			|	IF LPAREN Exp RPAREN Statement ELSE Statement
			|	WHILE LPAREN Exp RPAREN Statement
			|	BREAK SC
			|	CONTINUE
	;
Call	:	ID LPAREN ExpList RPAREN
		|	ID LPAREN RPAREN
	;
ExpList	:	Exp
		|	Exp COMMA ExpList
	;
Type	:	INT
		|	BYTE
		|	BOOL
	;
Exp	:	LPAREN Exp RPAREN
	|	Exp BINOP Exp
	|	ID
	|	Call
	|	NUM
	|	NUM B
	|	STRING
	|	TRUE
	|	FALSE
	|	NOT Exp
	|	Exp AND Exp
	|	Exp OR	Exp
	|	Exp RELOP Exp
	;


%%

int yyerror(char* message){
	cout << "Parse error: " << message << endl;
	exit(0);
}

int main(){
    return yyparse();
}

